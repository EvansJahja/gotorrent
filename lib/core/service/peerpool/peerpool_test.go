package peerpool

import (
	"testing"
	"testing/quick"

	"example.com/gotorrent/lib/core/adapter/peer"
	"example.com/gotorrent/lib/core/domain"
	mock_peer "example.com/gotorrent/lib/mocks/peer"
	"github.com/golang/mock/gomock"
	"github.com/stretchr/testify/assert"
)

func Test_FindNextPiece(t *testing.T) {
	ctrl := gomock.NewController(t)
	defer ctrl.Finish()

	f := func(mockTheirPieces [8]domain.PieceList, pieceCount uint32) (res bool) {
		havePiece := domain.NewPieceList(int(pieceCount))
		havePiece.SetPiece(4)
		pieceCount = pieceCount % 300
		res = true
		refPL := domain.NewPieceList(int(pieceCount))
		for _, p := range mockTheirPieces {
			if len(p) > len(refPL) {
				p = domain.PieceList([]byte(p)[:len(refPL)-1])
			}
		}

		defer func() {
			if x := recover(); x != nil {
				res = false
				return
			}
		}()
		peers := make([]peer.Peer, 0, len(mockTheirPieces))

		for _, mockP := range mockTheirPieces {
			p := mock_peer.NewMockPeer(ctrl)
			p.EXPECT().TheirPieces().Return(mockP).AnyTimes()
			peers = append(peers, p)
		}
		i := peerPoolImpl{
			connectedPeers: peers,
		}

		i.connectedPeers = peers
		i.FindNextPiece(havePiece, int(pieceCount))
		return
	}

	err := quick.Check(f, &quick.Config{
		MaxCount: 10,
	})
	assert.NoError(t, err)

	t.Run("tc1", func(t *testing.T) {

		a := [8]domain.PieceList{domain.PieceList{0x65, 0x8a, 0x7c, 0xa7, 0xa6, 0x8f, 0xc1, 0x8f, 0xb3, 0xf4, 0xe2, 0xe0, 0x74, 0xa5, 0x77, 0x5, 0x83, 0x86, 0x2f, 0x8a, 0xd2, 0xb8, 0x61}, domain.PieceList{0xf1, 0x67, 0x4b, 0x5d, 0x11, 0xcb, 0x84, 0xa4, 0x1b, 0xd, 0x9d, 0xb6, 0xae, 0xb3, 0x81, 0xcb, 0x67, 0x2a, 0x1e, 0x50, 0xe7, 0x6b, 0x54, 0xc6, 0x5f, 0x3e, 0x1c, 0x57, 0x65, 0x5a, 0xdf, 0xe4, 0x34, 0xcd, 0x49, 0x2, 0xa1, 0x74, 0x51, 0x3b, 0x8e, 0x3f, 0xf8, 0x4e}, domain.PieceList{0x40, 0x33, 0x20, 0x57}, domain.PieceList{0xae, 0x79, 0xe5, 0x7, 0x16, 0x60, 0x4, 0xb, 0x9f}, domain.PieceList{0x4d, 0x26, 0x9b, 0xb3, 0x53, 0xe7, 0x11, 0xa4, 0x1e, 0x4c, 0x1e}, domain.PieceList{0x94, 0x13, 0xa3, 0x18, 0x43, 0x1f, 0xcd, 0xf7, 0x3b, 0x40, 0xce, 0xdb, 0x1, 0x9d, 0x16, 0xe2, 0xa5, 0xb8, 0x2, 0x68, 0xc2, 0x6, 0x56, 0x3d, 0x45, 0x81, 0xdb, 0x7f, 0x29, 0x1c, 0x60, 0x58, 0xea, 0xfb, 0x9f, 0x78, 0xe7, 0x4b, 0x49, 0xd9, 0xdd, 0x9c, 0xeb, 0x1, 0x3}, domain.PieceList{0xa5, 0xea, 0xc9, 0xd6, 0x89, 0xba, 0xcb, 0xf8, 0xf7, 0x92, 0xaf, 0x3b, 0xb1, 0x68, 0xf4, 0xeb, 0xd0, 0x52, 0xb3}, domain.PieceList{0x2b, 0xa6, 0x80, 0x38, 0xb6, 0xed, 0x4d, 0x1b, 0xa1, 0x2c, 0x4e, 0x2, 0x66, 0xc4, 0x21, 0xba, 0x65, 0xd4, 0xdd, 0xb9, 0x58, 0xea, 0x3d, 0xe3, 0xb3, 0x3, 0x9c, 0xf6, 0xaa, 0x9d, 0xe0, 0x1e, 0xcf, 0x1f, 0xdc, 0xb4, 0x7d, 0x51, 0x79, 0x8c, 0x22, 0xeb, 0x6, 0x9e, 0xf7}}
		b := uint32(0x93f7ce9b)

		assert.True(t, f(a, b))

	})
}
